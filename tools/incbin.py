import os
import sys

HELP_MESSAGE = (
"""incbin.py by Eievui

Converts a binary file into a C array, producing a source and header file at the
given output location.

Usage:
incbin.py -o <output directory> -i <input file>

Flags:
-h, --help:	Print this message.
-i, --input:	The path to the input binary file.
-o, --output:	The path to the output directory.
-p, --prefix:	Optional prefix of the output array and files.
-n, --name:	Optional name of the output array and files.
-s, --silence:	Silence success messages.
""")

C_MESSAGE = (
"""/**
 * Generated by incbin.py.
 * Do not include this file directly. Instead, include the header (.h) file of
 * of the same name.
*/\n
""")

H_MESSAGE = (
"""/**
 * Generated by incbin.py.
 * Include this file to access your binary data as an unsigned char array.
*/\n
""")

def main():

	input_dir = False
	output_dir = False
	out_name = False
	out_pre = ""
	silence_success = False

	# Parsing
	for i in range(sys.argv.__len__()):
		# I would use a match statement here, but they're relatively new.
		if sys.argv[i] == "-h" or sys.argv[i] == "--help":
			print(HELP_MESSAGE)
			return
		elif sys.argv[i] == "-i" or sys.argv[i] == "--input":
			input_dir = sys.argv[i + 1] # bytearray(open(sys.argv[i + 1], 'rb').read())
		elif sys.argv[i] == "-o" or sys.argv[i] == "--output":
			output_dir = sys.argv[i + 1]
		elif sys.argv[i] == "-n" or sys.argv[i] == "--name":
			out_name = sys.argv[i + 1]
		elif sys.argv[i] == "-p" or sys.argv[i] == "--prefix":
			out_pre = sys.argv[i + 1]
		elif sys.argv[i] == "-s" or sys.argv[i] == "--silence":
			silence_success = True
	
	if not input_dir:
		print("ERROR: Input file required. Use -h for help.")
		return
	if not output_dir:
		print("ERROR: Output directory required. Use -h for help.")
		return

	if out_name:
		out_name = out_pre + out_name
	else:
		out_name = out_pre + input_dir[input_dir.rfind("/") + 1 : input_dir.rfind(".")]
	
	# Init
	os.makedirs(output_dir, 0o777, True)
	input_array = bytearray(open(input_dir, 'rb').read())
	output_c = open(output_dir + "/" + out_name + ".c", 'w+')
	output_h = open(output_dir + "/" + out_name + ".h", 'w+')
	
	# .c
	output_c.write(C_MESSAGE)
	output_c.write("unsigned char " + out_name + "[] = {\n")
	lines = 0
	for i in input_array:
		output_c.write("	0x" + str(i) + ",")
		lines += 1
		if not (lines % 8):
			output_c.write("\n")
	output_c.write("}")

	# .h
	output_h.write(H_MESSAGE)
	output_h.write("unsigned char " + out_name + "[]")

	# Success
	if not silence_success:
		print("Successfully created \"" + output_dir + "/" + out_name + ".c\" from \"" + input_dir + "\"")

main()